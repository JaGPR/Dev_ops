[{"C:\\dev\\react-notes-app\\notes-frontend\\src\\index.js":"1","C:\\dev\\react-notes-app\\notes-frontend\\src\\App.js":"2","C:\\dev\\react-notes-app\\notes-frontend\\src\\reportWebVitals.js":"3","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\store.js":"4","C:\\dev\\react-notes-app\\notes-frontend\\src\\routes\\AllRoutes.jsx":"5","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\users\\user_reducer.js":"6","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\notes\\note_reducer.js":"7","C:\\dev\\react-notes-app\\notes-frontend\\src\\components\\Home\\Navbar\\index.jsx":"8","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\users\\user_types.js":"9","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\notes\\note_types.js":"10","C:\\dev\\react-notes-app\\notes-frontend\\src\\routes\\PrivateRoute.jsx":"11","C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Signuppage.jsx":"12","C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Homepage.jsx":"13","C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Loginpage.jsx":"14","C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Notespage.jsx":"15","C:\\dev\\react-notes-app\\notes-frontend\\src\\components\\Home\\Navbar\\Navbar.jsx":"16","C:\\dev\\react-notes-app\\notes-frontend\\src\\constants\\config.js":"17","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\notes\\note_actions.js":"18","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\users\\user_actions.js":"19","C:\\dev\\react-notes-app\\notes-frontend\\src\\components\\Notes\\NoteCard\\NoteCard.jsx":"20"},{"size":832,"mtime":1748842526568,"results":"21","hashOfConfig":"22"},{"size":260,"mtime":1748842526565,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1748842526574,"results":"24","hashOfConfig":"22"},{"size":397,"mtime":1748842526570,"results":"25","hashOfConfig":"22"},{"size":631,"mtime":1748842526574,"results":"26","hashOfConfig":"22"},{"size":939,"mtime":1748842526570,"results":"27","hashOfConfig":"22"},{"size":2323,"mtime":1748842526570,"results":"28","hashOfConfig":"22"},{"size":42,"mtime":1748842526565,"results":"29","hashOfConfig":"22"},{"size":196,"mtime":1748842526574,"results":"30","hashOfConfig":"22"},{"size":690,"mtime":1748842526570,"results":"31","hashOfConfig":"22"},{"size":274,"mtime":1748842526574,"results":"32","hashOfConfig":"22"},{"size":3856,"mtime":1748842526570,"results":"33","hashOfConfig":"22"},{"size":1706,"mtime":1748842526570,"results":"34","hashOfConfig":"22"},{"size":2382,"mtime":1748842526570,"results":"35","hashOfConfig":"22"},{"size":2621,"mtime":1748842526570,"results":"36","hashOfConfig":"22"},{"size":2984,"mtime":1748842526565,"results":"37","hashOfConfig":"22"},{"size":47,"mtime":1749038727762,"results":"38","hashOfConfig":"22"},{"size":3382,"mtime":1748842526570,"results":"39","hashOfConfig":"22"},{"size":730,"mtime":1748842526570,"results":"40","hashOfConfig":"22"},{"size":2906,"mtime":1748842526568,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l866in",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},"C:\\dev\\react-notes-app\\notes-frontend\\src\\index.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\App.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\reportWebVitals.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\store.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\routes\\AllRoutes.jsx",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\users\\user_reducer.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\notes\\note_reducer.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\components\\Home\\Navbar\\index.jsx",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\users\\user_types.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\notes\\note_types.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\routes\\PrivateRoute.jsx",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Signuppage.jsx",["110","111","112","113","114"],[],"import {\r\n    Flex,\r\n    Box,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    InputGroup,\r\n    HStack,\r\n    InputRightElement,\r\n    Stack,\r\n    Button,\r\n    Heading,\r\n    Text,\r\n    useColorModeValue,\r\n    Link,\r\n  } from '@chakra-ui/react';\r\n  import { useState } from 'react';\r\n  import { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUser } from '../redux/users/user_actions';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../constants/config';\r\n  \r\n  export default function Signuppage() {\r\n    const nav = useNavigate()\r\n    const [name, setName] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const handleSignUp = async()=>{\r\n      let data = await axios.post(BASE_URL+\"/user/register\", {\r\n          name, email, password\r\n      })\r\n      let {message, status} = data.data\r\n      if(status == 1)\r\n      {\r\n        alert(message)\r\n        nav(\"/login\")\r\n      }\r\n      else\r\n      {\r\n        alert(message)\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <Flex\r\n        minH={'100vh'}\r\n        align={'center'}\r\n        justify={'center'}\r\n        bg={useColorModeValue('gray.50', 'gray.800')}>\r\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\r\n          <Stack align={'center'}>\r\n            <Heading fontSize={'4xl'} textAlign={'center'}>\r\n              Sign up\r\n            </Heading>\r\n            <Text fontSize={'lg'} color={'gray.600'}>\r\n              to enjoy all of our cool features ✌️\r\n            </Text>\r\n          </Stack>\r\n          <Box\r\n            rounded={'lg'}\r\n            bg={useColorModeValue('white', 'gray.700')}\r\n            boxShadow={'lg'}\r\n            p={8}>\r\n            <Stack spacing={4}>\r\n              <FormControl id=\"userName\" isRequired>\r\n                <FormLabel>Username</FormLabel>\r\n                <Input type=\"text\" value={name} onChange={(e)=>setName(e.target.value)}/>\r\n              </FormControl>\r\n              <FormControl id=\"email\" isRequired>\r\n                <FormLabel>Email address</FormLabel>\r\n                <Input type=\"email\" value={email} onChange={(e)=>setEmail(e.target.value)}/>\r\n              </FormControl>\r\n              <FormControl id=\"password\" isRequired>\r\n                <FormLabel>Password</FormLabel>\r\n                <InputGroup>\r\n                  <Input type={showPassword ? 'text' : 'password'} value={password} onChange={(e)=>setPassword(e.target.value)}/>\r\n                  <InputRightElement h={'full'}>\r\n                    <Button\r\n                      variant={'ghost'}\r\n                      onClick={() =>\r\n                        setShowPassword((showPassword) => !showPassword)\r\n                      }>\r\n                      {showPassword ? <ViewIcon /> : <ViewOffIcon />}\r\n                    </Button>\r\n                  </InputRightElement>\r\n                </InputGroup>\r\n              </FormControl>\r\n              <Stack spacing={10} pt={2}>\r\n                <Button\r\n                  loadingText=\"Submitting\"\r\n                  size=\"lg\"\r\n                  bg={'blue.400'}\r\n                  color={'white'}\r\n                  onClick = {handleSignUp}\r\n                  _hover={{\r\n                    bg: 'blue.500',\r\n                  }}>\r\n                  Sign up\r\n                </Button>\r\n              </Stack>\r\n              <Stack pt={6}>\r\n                <Text align={'center'}>\r\n                  Already a user? <Link onClick={()=>{\r\n                    nav(\"/login\")\r\n                  }} color={'blue.400'}>Login</Link>\r\n                </Text>\r\n              </Stack>\r\n            </Stack>\r\n          </Box>\r\n        </Stack>\r\n      </Flex>\r\n    );\r\n  }","C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Homepage.jsx",["115","116"],[],"import {\r\n    Button,\r\n    Flex,\r\n    HStack,\r\n    Heading,\r\n    Image,\r\n    Spacer,\r\n    Stack,\r\n    Text,\r\n    useBreakpointValue,\r\n  } from '@chakra-ui/react';\r\n  import { useNavigate } from 'react-router-dom';\r\n\r\n  \r\n  export default function Homepage() {\r\n    const nav = useNavigate();\r\n    return (\r\n      <Stack minH={'100vh'} direction={{ base: 'column', md: 'row' }}>\r\n        <Flex p={8} flex={1} align={'center'} alignItems={'center'} justify={'center'}>\r\n          <Stack spacing={6} w={'full'} maxW={'lg'}>\r\n            <Heading fontSize={{ base: '3xl', md: '4xl', lg: '5xl' }}>\r\n              <Text color={'#5b9cf2'} as={'span'}>\r\n                Your Notes\r\n              </Text>{' '}\r\n            </Heading>\r\n            <Text fontSize={{ base: 'md', lg: 'lg' }} color={'gray.500'}>\r\n              A note taking app built using MongoDB, Express, React and Node.JS\r\n            </Text>\r\n            <Stack direction={'row'} spacing={4}>\r\n              <Button\r\n                rounded={'full'}\r\n                bg={'blue.400'}\r\n                color={'white'}\r\n                _hover={{\r\n                  bg: '#01d8fb',\r\n                }}\r\n                onClick={()=>{\r\n                    nav(\"/login\")\r\n                }}>\r\n                Log In\r\n              </Button>\r\n              <Button rounded={'full'} onClick={()=>{nav(\"/register\")}}>Sign Up</Button>\r\n            </Stack>\r\n            <Spacer />\r\n            <Image src=\"/mern.png\" />\r\n          </Stack>\r\n        </Flex>\r\n        <Flex flex={1}>\r\n          <Image\r\n            alt={'Login Image'}\r\n            objectFit={'cover'}\r\n            src=\"/homebg.jpeg\"\r\n          />\r\n        </Flex>\r\n      </Stack>\r\n    );\r\n  }","C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Loginpage.jsx",["117","118","119","120","121"],[],"import {\r\n    Flex,\r\n    Box,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    Checkbox,\r\n    Stack,\r\n    Link,\r\n    Button,\r\n    Heading,\r\n    Text,\r\n    useColorModeValue,\r\n  } from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUser } from '../redux/users/user_actions';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n  \r\n  export default function Loginpage() {\r\n    const {auth, token, loading, error} = useSelector((state)=>state.userReducer)\r\n    const nav = useNavigate()\r\n    if(auth)\r\n    {\r\n        nav(\"/notes\")\r\n    }\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const dispatch = useDispatch()\r\n    const handleLogin = ()=>{\r\n        dispatch(getUser({email, password}))\r\n    }\r\n    return (\r\n      <Flex\r\n        minH={'100vh'}\r\n        align={'center'}\r\n        justify={'center'}\r\n        bg={useColorModeValue('gray.50', 'gray.800')}\r\n        >\r\n        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\r\n          <Stack align={'center'}>\r\n            <Heading fontSize={'4xl'}>Sign in to your account</Heading>\r\n            <Text fontSize={'lg'} color={'gray.600'}>\r\n              to enjoy all of our cool features ✌️\r\n            </Text>\r\n          </Stack>\r\n          <Box\r\n            rounded={'lg'}\r\n            bg={useColorModeValue('white', 'gray.700')}\r\n            boxShadow={'lg'}\r\n            p={8}>\r\n            <Stack spacing={4}>\r\n              <FormControl id=\"email\">\r\n                <FormLabel>Email address</FormLabel>\r\n                <Input value={email} onChange={(e)=>setEmail(e.target.value)} type=\"email\" />\r\n              </FormControl>\r\n              <FormControl id=\"password\">\r\n                <FormLabel>Password</FormLabel>\r\n                <Input value={password} onChange={(e)=>setPassword(e.target.value)} type=\"password\" />\r\n              </FormControl>\r\n              <Stack spacing={10}>\r\n                <Button\r\n                  onClick={handleLogin}\r\n                  bg={'blue.400'}\r\n                  color={'white'}\r\n                  _hover={{\r\n                    bg: 'blue.500',\r\n                  }}>\r\n                  Sign in\r\n                </Button>\r\n              </Stack>\r\n            </Stack>\r\n          </Box>\r\n        </Stack>\r\n      </Flex>\r\n    );\r\n  }","C:\\dev\\react-notes-app\\notes-frontend\\src\\pages\\Notespage.jsx",["122","123","124"],[],"import { Box, Button, Grid, IconButton, Input, Textarea, useDisclosure } from \"@chakra-ui/react\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getNotes, createNotes } from \"../redux/notes/note_actions\";\r\nimport NoteCard from \"../components/Notes/NoteCard/NoteCard\";\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n} from \"@chakra-ui/react\";\r\n\r\nexport default function Notespage()\r\n{\r\n    const dispatch = useDispatch()\r\n    const {loading, error, data} = useSelector((state)=>state.noteReducer)\r\n    const [notes, setNotes] = useState([])\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const initialRef = useRef(null)\r\n    const finalRef = useRef(null)\r\n    const [title, setTitle] = useState(\"\")\r\n    const [body, setBody] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n        dispatch(getNotes())\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        setNotes(data)\r\n    }, [data])\r\n\r\n    const createNote = ()=>{\r\n        dispatch(createNotes({title, body}))\r\n        onClose()\r\n    }\r\n\r\n    return <Box mt={20} padding={8}>\r\n        <Grid gap={10} w={\"100%\"} margin={\"auto\"} gridTemplateColumns=\"repeat(4, 1fr)\">\r\n            {notes?.map((el)=><NoteCard {...el}/>)}\r\n        </Grid>\r\n        <>\r\n        <IconButton boxShadow={\"rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;\"} position={\"fixed\"} w={\"100px\"} h={\"100px\"} bg={\"#5b9cf2\"} bottom={0} right={0} margin={16} icon={<AddIcon fontSize={30} />} \r\n        onClick={onOpen}></IconButton>\r\n        <Modal\r\n          initialFocusRef={initialRef}\r\n          finalFocusRef={finalRef}\r\n          isOpen={isOpen}\r\n          onClose={onClose}\r\n        >\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Create New Note</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody pb={6}>\r\n\r\n                <Input value={title}m placeholder=\"Please enter title\" onChange={(e)=>setTitle(e.target.value)}></Input>\r\n                <Textarea mt={8} value={body} placeholder={'Please enter description'} onChange={(e)=>setBody(e.target.value)}></Textarea>\r\n              \r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button colorScheme=\"blue\" mr={3} onClick={createNote}>\r\n                Create\r\n              </Button>\r\n              <Button onClick={onClose}>Cancel</Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n        </>\r\n    </Box>\r\n}","C:\\dev\\react-notes-app\\notes-frontend\\src\\components\\Home\\Navbar\\Navbar.jsx",["125","126","127"],[],"import {\r\n  Box,\r\n  Flex,\r\n  Avatar,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Stack,\r\n  useColorMode,\r\n  Center,\r\n} from '@chakra-ui/react';\r\nimport { MoonIcon, SunIcon } from '@chakra-ui/icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOGOUT } from '../../../redux/users/user_types';\r\n\r\nexport default function Navbar() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const nav = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const {auth, user, token, loading, error} = useSelector((state)=>state.userReducer)\r\n  return (\r\n    <>\r\n      <Box zIndex={\"9999\"} top = {0} position = {\"fixed\"} w = {\"100%\"} boxShadow = {\"rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\"}\r\n      bg={\"#5b9cf2\"} px={4}>\r\n        <Flex h={16} alignItems={'center'} justifyContent={'space-between'}>\r\n          <Box fontWeight={\"bold\"} cursor=\"pointer\" onClick={()=>{\r\n            nav(\"/\")\r\n          }}>React Notes App</Box>\r\n          <Flex alignItems={'center'}>\r\n            <Stack alignItems = {\"center\"} direction={'row'} spacing={7}>\r\n              <Button display={auth?\"block\":\"none\"} bg={\"#01d8fb\"} onClick={()=>{\r\n                nav(\"/notes\")\r\n              }}>All Notes</Button>\r\n              <Button display={auth?\"none\":\"block\"} bg={\"#01d8fb\"} onClick={()=>{\r\n                nav(\"/login\")\r\n              }}>Log In</Button>\r\n              <Button display={auth?\"none\":\"block\"} bg={\"#01d8fb\"} onClick={()=>{\r\n                nav(\"/register\")\r\n              }}>Sign Up</Button>\r\n              <Button bg = {\"#01d8fb\"} onClick={toggleColorMode}>\r\n                {colorMode === 'light' ? <MoonIcon /> : <SunIcon />}\r\n              </Button>\r\n\r\n              <Menu>\r\n                <MenuButton display={auth?\"block\":\"none\"}\r\n                  as={Button}\r\n                  border = \"2px solid #5b9cf2\"\r\n                  padding = {2}\r\n                  rounded={'full'}\r\n                  variant={'link'}\r\n                  cursor={'pointer'}\r\n                  minW={0}>\r\n                  <Avatar\r\n                    size={'sm'}\r\n                    src={\"/user.png\"}\r\n                  />\r\n                </MenuButton>\r\n                <MenuList alignItems={'center'}>\r\n                  <br />\r\n                  <Center>\r\n                    <Avatar\r\n                      size={'lg'}\r\n                      src={'/user.png'}\r\n                    />\r\n                  </Center>\r\n                  <br />\r\n                  <Center>\r\n                    <p>{user}</p>\r\n                  </Center>\r\n                  <br />\r\n                  <MenuDivider />\r\n                  <MenuItem onClick={()=>{\r\n                    dispatch({type: LOGOUT})\r\n                    }}>Logout</MenuItem>\r\n                </MenuList>\r\n              </Menu>\r\n            </Stack>\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </>\r\n  );\r\n}","C:\\dev\\react-notes-app\\notes-frontend\\src\\constants\\config.js",[],[],"C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\notes\\note_actions.js",["128","129","130","131","132","133","134","135","136","137","138","139","140"],[],"import axios from \"axios\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { store } from \"../store\"\r\nimport { CREATE_NOTES_ERROR, CREATE_NOTES_LOADING, CREATE_NOTES_SUCCESS, DELETE_NOTES_ERROR, DELETE_NOTES_LOADING, DELETE_NOTES_SUCCESS, GET_NOTES_ERROR, GET_NOTES_LOADING, GET_NOTES_SUCCESS, UPDATE_NOTES_ERROR, UPDATE_NOTES_LOADING, UPDATE_NOTES_SUCCESS } from \"./note_types\"\r\nimport { BASE_URL } from \"../../constants/config\"\r\nimport { LOGOUT } from \"../users/user_types\"\r\n\r\n\r\nexport const getNotes = ()=>async(dispatch)=>{\r\n    const {token} = store.getState().userReducer\r\n    dispatch({type: GET_NOTES_LOADING})\r\n    try {\r\n        const res = await axios(BASE_URL+\"/note\", {\r\n            method: \"get\",\r\n            headers: {\r\n                Authorization: token\r\n            }\r\n        })\r\n        const {status, message, data} = res.data\r\n        if(status == 1)\r\n        dispatch({type: GET_NOTES_SUCCESS, payload: data})\r\n        else if(status == 2)\r\n        dispatch({type: LOGOUT})\r\n        else\r\n        dispatch({type: GET_NOTES_ERROR})\r\n    } catch (error) {\r\n        dispatch({type: GET_NOTES_ERROR})\r\n    }\r\n}\r\n\r\nexport const createNotes = (obj)=>async(dispatch)=>{\r\n    const {token} = store.getState().userReducer\r\n    dispatch({type: CREATE_NOTES_LOADING})\r\n    try {\r\n        const res = await axios(BASE_URL+\"/note/create\", {\r\n            method: \"post\",\r\n            data: obj,\r\n            headers: {\r\n                Authorization: token\r\n            }\r\n        })\r\n        const {status, message} = res.data\r\n        if(status == 1)\r\n        {\r\n            dispatch({type: CREATE_NOTES_SUCCESS})\r\n            dispatch(getNotes())\r\n        }\r\n        else if(status == 2)\r\n        dispatch({type: LOGOUT})\r\n        else\r\n        dispatch({type: CREATE_NOTES_ERROR})\r\n    } catch (error) {\r\n        dispatch({type: CREATE_NOTES_ERROR})\r\n    }\r\n}\r\n\r\nexport const updateNotes = (id, obj)=>async(dispatch)=>{\r\n    const {token} = store.getState().userReducer\r\n    dispatch({type: UPDATE_NOTES_LOADING})\r\n    try {\r\n        const res = await axios(BASE_URL+\"/note/\", {\r\n            method: \"patch\",\r\n            data: obj,\r\n            headers: {\r\n                Authorization: token,\r\n                id: id\r\n            }\r\n        })\r\n        const {status, message} = res.data\r\n        if(status == 1)\r\n        {\r\n            dispatch({type: UPDATE_NOTES_SUCCESS})\r\n            dispatch(getNotes())\r\n        }\r\n        else if(status == 2)\r\n        dispatch({type: LOGOUT})\r\n        else\r\n        dispatch({type: UPDATE_NOTES_ERROR})\r\n    } catch (error) {\r\n        dispatch({type: UPDATE_NOTES_ERROR})\r\n    }\r\n}\r\n\r\nexport const deleteNotes = (id)=>async(dispatch)=>{\r\n    const {token} = store.getState().userReducer\r\n    dispatch({type: DELETE_NOTES_LOADING})\r\n    try {\r\n        const res = await axios(BASE_URL+\"/note/\", {\r\n            method: \"delete\",\r\n            headers: {\r\n                Authorization: token,\r\n                id: id\r\n            }\r\n        })\r\n        const {status, message} = res.data\r\n        if(status == 1)\r\n        {\r\n            dispatch({type: DELETE_NOTES_SUCCESS})\r\n            dispatch(getNotes())\r\n        }\r\n        else if(status == 2)\r\n        dispatch({type: LOGOUT})\r\n        else\r\n        dispatch({type: DELETE_NOTES_ERROR})\r\n    } catch (error) {\r\n        dispatch({type: DELETE_NOTES_ERROR})\r\n    }\r\n}","C:\\dev\\react-notes-app\\notes-frontend\\src\\redux\\users\\user_actions.js",["141"],[],"import axios from \"axios\"\r\nimport { LOGIN_USER_ERROR, LOGIN_USER_LOADING, LOGIN_USER_SUCCESS } from \"./user_types\"\r\nimport { BASE_URL } from \"../../constants/config\"\r\n\r\nexport const getUser = (obj) => async(dispatch) => {\r\n    dispatch({type: LOGIN_USER_LOADING})\r\n    try {\r\n        let data = await axios(BASE_URL+\"/user/login\", {\r\n        method: \"post\",\r\n        data: obj\r\n        })\r\n        let {message, user, token, status} = data.data\r\n        if(status == 1)\r\n        dispatch({type: LOGIN_USER_SUCCESS, payload: {user, token}})\r\n        else\r\n        {\r\n            alert(message)\r\n            dispatch({type: LOGIN_USER_ERROR})\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({type: LOGIN_USER_ERROR})\r\n    }\r\n}","C:\\dev\\react-notes-app\\notes-frontend\\src\\components\\Notes\\NoteCard\\NoteCard.jsx",["142","143","144","145","146"],[],"import { Button, Card, CardBody, Heading, VStack, Text, Flex, HStack, CardHeader, CardFooter } from \"@chakra-ui/react\"\r\nimport \"./notestyle.css\"\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { deleteNotes, updateNotes } from \"../../../redux/notes/note_actions\"\r\nimport {\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Input,\r\n    Textarea,\r\n    useDisclosure\r\n} from \"@chakra-ui/react\";\r\n\r\nexport default function NoteCard({title, body, user, _id}){\r\n    \r\n    const dispatch = useDispatch()\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const initialRef = useRef(null)\r\n    const finalRef = useRef(null)\r\n    const [notes, setNotes] = useState([])\r\n    const [tempTitle, setTitle] = useState(title)\r\n    const [tempBody, setBody] = useState(body)\r\n    const updateNote = ()=>{\r\n        dispatch(updateNotes(_id, {title: tempTitle, body: tempBody}))\r\n        onClose()\r\n    }\r\n\r\n    return <Card className=\"card\" align={\"center\"} size='md'>\r\n        <CardHeader height={\"20%\"} alignItems={'center'}>\r\n            <Heading size='xl' noOfLines={1}>{title}</Heading>\r\n        </CardHeader>\r\n        <CardBody mt={\"10px\"} height = {\"50%\"}>\r\n            <Text noOfLines={\"8\"}>{body}</Text>\r\n        </CardBody>\r\n        <CardFooter height={\"30%\"}>\r\n            <HStack width = {\"100%\"}>\r\n                <>\r\n                <Button bgColor={\"#00e9bf\"} onClick={onOpen}>Update</Button>\r\n                    <Modal\r\n                    initialFocusRef={initialRef}\r\n                    finalFocusRef={finalRef}\r\n                    isOpen={isOpen}\r\n                    onClose={onClose}\r\n                    >\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader>Update Note</ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <ModalBody pb={6}>\r\n\r\n                            <Input value={tempTitle}m placeholder={title} onChange={(e)=>setTitle(e.target.value)}></Input>\r\n                            <Textarea mt={8} value={tempBody} placeholder={body} onChange={(e)=>setBody(e.target.value)}></Textarea>\r\n                        \r\n                        </ModalBody>\r\n\r\n                        <ModalFooter>\r\n                        <Button colorScheme=\"blue\" mr={3} onClick={updateNote}>\r\n                            Update\r\n                        </Button>\r\n                        <Button onClick={onClose}>Cancel</Button>\r\n                        </ModalFooter>\r\n                    </ModalContent>\r\n                    </Modal>\r\n                </>\r\n                <Button bgColor={\"#00e9bf\"} onClick={()=>{\r\n                    dispatch(deleteNotes(_id))\r\n                }}>Delete</Button>\r\n            </HStack>\r\n        </CardFooter>\r\n    </Card>\r\n}",{"ruleId":"147","severity":1,"message":"148","line":8,"column":5,"nodeType":"149","messageId":"150","endLine":8,"endColumn":11},{"ruleId":"147","severity":1,"message":"151","line":20,"column":10,"nodeType":"149","messageId":"150","endLine":20,"endColumn":21},{"ruleId":"147","severity":1,"message":"152","line":20,"column":23,"nodeType":"149","messageId":"150","endLine":20,"endColumn":34},{"ruleId":"147","severity":1,"message":"153","line":21,"column":10,"nodeType":"149","messageId":"150","endLine":21,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":37,"column":17,"nodeType":"156","messageId":"157","endLine":37,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":4,"column":5,"nodeType":"149","messageId":"150","endLine":4,"endColumn":11},{"ruleId":"147","severity":1,"message":"158","line":10,"column":5,"nodeType":"149","messageId":"150","endLine":10,"endColumn":23},{"ruleId":"147","severity":1,"message":"159","line":7,"column":5,"nodeType":"149","messageId":"150","endLine":7,"endColumn":13},{"ruleId":"147","severity":1,"message":"160","line":9,"column":5,"nodeType":"149","messageId":"150","endLine":9,"endColumn":9},{"ruleId":"147","severity":1,"message":"161","line":22,"column":18,"nodeType":"149","messageId":"150","endLine":22,"endColumn":23},{"ruleId":"147","severity":1,"message":"162","line":22,"column":25,"nodeType":"149","messageId":"150","endLine":22,"endColumn":32},{"ruleId":"147","severity":1,"message":"163","line":22,"column":34,"nodeType":"149","messageId":"150","endLine":22,"endColumn":39},{"ruleId":"147","severity":1,"message":"162","line":20,"column":12,"nodeType":"149","messageId":"150","endLine":20,"endColumn":19},{"ruleId":"147","severity":1,"message":"163","line":20,"column":21,"nodeType":"149","messageId":"150","endLine":20,"endColumn":26},{"ruleId":"164","severity":1,"message":"165","line":30,"column":8,"nodeType":"166","endLine":30,"endColumn":10,"suggestions":"167"},{"ruleId":"147","severity":1,"message":"161","line":24,"column":22,"nodeType":"149","messageId":"150","endLine":24,"endColumn":27},{"ruleId":"147","severity":1,"message":"162","line":24,"column":29,"nodeType":"149","messageId":"150","endLine":24,"endColumn":36},{"ruleId":"147","severity":1,"message":"163","line":24,"column":38,"nodeType":"149","messageId":"150","endLine":24,"endColumn":43},{"ruleId":"147","severity":1,"message":"152","line":2,"column":10,"nodeType":"149","messageId":"150","endLine":2,"endColumn":21},{"ruleId":"147","severity":1,"message":"168","line":19,"column":24,"nodeType":"149","messageId":"150","endLine":19,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":20,"column":19,"nodeType":"156","messageId":"157","endLine":20,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":22,"column":24,"nodeType":"156","messageId":"157","endLine":22,"endColumn":26},{"ruleId":"147","severity":1,"message":"168","line":42,"column":24,"nodeType":"149","messageId":"150","endLine":42,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":43,"column":19,"nodeType":"156","messageId":"157","endLine":43,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":48,"column":24,"nodeType":"156","messageId":"157","endLine":48,"endColumn":26},{"ruleId":"147","severity":1,"message":"168","line":69,"column":24,"nodeType":"149","messageId":"150","endLine":69,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":70,"column":19,"nodeType":"156","messageId":"157","endLine":70,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":75,"column":24,"nodeType":"156","messageId":"157","endLine":75,"endColumn":26},{"ruleId":"147","severity":1,"message":"168","line":95,"column":24,"nodeType":"149","messageId":"150","endLine":95,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":96,"column":19,"nodeType":"156","messageId":"157","endLine":96,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":101,"column":24,"nodeType":"156","messageId":"157","endLine":101,"endColumn":26},{"ruleId":"154","severity":1,"message":"155","line":13,"column":19,"nodeType":"156","messageId":"157","endLine":13,"endColumn":21},{"ruleId":"147","severity":1,"message":"169","line":1,"column":43,"nodeType":"149","messageId":"150","endLine":1,"endColumn":49},{"ruleId":"147","severity":1,"message":"170","line":1,"column":57,"nodeType":"149","messageId":"150","endLine":1,"endColumn":61},{"ruleId":"147","severity":1,"message":"171","line":3,"column":10,"nodeType":"149","messageId":"150","endLine":3,"endColumn":19},{"ruleId":"147","severity":1,"message":"172","line":25,"column":12,"nodeType":"149","messageId":"150","endLine":25,"endColumn":17},{"ruleId":"147","severity":1,"message":"173","line":25,"column":19,"nodeType":"149","messageId":"150","endLine":25,"endColumn":27},"no-unused-vars","'HStack' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'getUser' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useBreakpointValue' is defined but never used.","'Checkbox' is defined but never used.","'Link' is defined but never used.","'token' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["174"],"'message' is assigned a value but never used.","'VStack' is defined but never used.","'Flex' is defined but never used.","'useEffect' is defined but never used.","'notes' is assigned a value but never used.","'setNotes' is assigned a value but never used.",{"desc":"175","fix":"176"},"Update the dependencies array to be: [dispatch]",{"range":"177","text":"178"},[1024,1026],"[dispatch]"]